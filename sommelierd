#!/usr/bin/env ruby
require 'fileutils'
require 'securerandom'
require 'json'
require 'optparse'

ENV['XDG_RUNTIME_DIR'] ||= '/var/run/chrome' # set XDG_RUNTIME_DIR if not set

TMPDIR   = ENV.fetch('TMPDIR', '/tmp')
LOGFILE  = ENV.fetch( 'SOMMELIER_LOGFILE',  File.join(TMPDIR, 'sommelier.log') )
WL_INFO  = ENV.fetch( 'SOMMELIER_WL_INFO',  File.join(TMPDIR, 'sommelier-wl.info') )
X11_INFO = ENV.fetch( 'SOMMELIER_X11_INFO', File.join(TMPDIR, 'sommelier-x11.log') )

def start_somm_x11_daemon
  ENV['DISPLAY']    ||= ':0'
  ENV['XAUTHORITY'] ||= '/home/chronos/.Xauthority'

  somm_pid = spawn 'sommelier', '-X', '--glamor',
                   "--x-display=#{ENV['DISPLAY']}",
                   "--x-auth=#{ENV['XAUTHORITY']}",
                   '--no-exit-with-child',
                   'bash', '-eu', '-c', <<~CMD
                     echo -n >> #{ENV['XAUTHORITY']}
                     xauth -f #{ENV['XAUTHORITY']} add #{ENV['DISPLAY']} . #{SecureRandom.hex(16)}
                     source #{__dir__}/../etc/sommelierrc
                   CMD

  info = { pid: somm_pid, display: ENV['DISPLAY'] }

  warn "process running with PID #{pid}"

  # write pid to /tmp/sommelier-x11.pid
  # write current display number to /tmp/sommelier-x11.display (used for checking available display in sommelier.env)
  File.write('/tmp/sommelier-x11.info', info.to_json)
end

def start_somm_wl_daemon
  ENV['WAYLAND_DISPLAY'] ||= 'wayland-1'

  somm_pid = spawn 'sommelier', '--parent', "--socket=#{ENV['WAYLAND_DISPLAY']}"
  info     = { pid: somm_pid, display: ENV['WAYLAND_DISPLAY'] }

  warn "process running with PID #{pid}"

  # write pid to /tmp/sommelier-wl.pid
  # write current display number to /tmp/sommelier-wl.display (used for checking available display in sommelier.env)
  File.write(WL_INFO, info.to_json)
end

def start_somm_daemon
  somm_wl_status, somm_x11_status = somm_daemon_status

  # redirect output to log file
  $stderr.reopen( $stdout.reopen(WL_LOG) )

  start_somm_wl_daemon unless somm_wl_status[:running]
  start_somm_x11_daemon unless somm_x11_running[:running]
end

def stop_somm_daemon
  # stop_somm_daemon: kill sommelier process listed in /tmp/sommelier-*.info files
  somm_wl_status, somm_x11_status = somm_daemon_status

  Process.kill('TERM', somm_wl_status[:pid]) if somm_wl_running[:running]
  Process.kill('TERM', somm_x11_status[:pid]) if somm_x11_status[:running]
end

def somm_daemon_status
  # vaild_daemon_running: check sommelier process validity
  somm_wl_info  = File.exist?(WL_INFO)  && JSON.load_file(WL_INFO)
  somm_x11_info = File.exist?(X11_INFO) && JSON.load_file(X11_INFO)

  somm_wl_pid = somm_wl_info['pid']
  somm_x11_pid = somm_x11_info['pid']

  somm_wl_running  = Dir.exist?("/proc/#{somm_wl_pid}/")
  somm_x11_running = Dir.exist?("/proc/#{somm_x11_pid}/")

  return [{ running: somm_wl_running, pid: somm_wl_pid }, { running: somm_x11_running, pid: somm_x11_pid }]
end

# handle symlinks
case File.basename($0)
when 'startsommelier'
  ARGV << '--start'
when 'stopsommelier'
  ARGV << '--stop'
when 'restartsommelier'
  ARGV << '--restart'
end

begin
  OptionParser.new do |opts|
    opts.banner = <<~EOT
      sommelierd: Sommelier daemon manager

      Usage: sommelierd <command>
    EOT

    opts.on('--start', 'start sommelier daemon') { start_somm_daemon }
    opts.on('--stop',  'stop sommelier daemon' ) { stop_somm_daemon }

    opts.on('--restart', 'restart sommelier daemon') do
      stop_somm_daemon

      start_somm_wl_daemon
      start_somm_x11_daemon
    end

    opts.on('--log', 'print daemon output') do
      $stdout.write File.read(LOGFILE)
    end
  end
rescue OptionParser::InvalidOption => e
  abort <<~EOT
    Invaild command: #{ARGV[0]}

    Type `sommelierd --help` for usage.
  EOT
end